////////////////////////////////Program Name: BinarySearch.c//////////////////////////////////////
#include<stdio.h>
int main()
{
    int c, first, last, middle, n, search, array[100];
    printf("Enter number of elements\n");
    scanf("%d",&n);
    printf("Enter %d integers\n", n);
    for ( c = 0 ; c < n ; c++ )
        scanf("%d",&array[c]);
    printf("Enter value to find\n");
    scanf("%d",&search);
    first = 0;
    last = n - 1;
    middle = (first+last)/2;
    while( first <= last )
    {
        if ( array[middle] < search )
            first = middle + 1;
        else if ( array[middle] == search )
        {
            printf("%d found at location %d.\n", search, middle+1);
            break;
        }
        else
            last = middle - 1;
        middle = (first + last)/2;
    }
    if ( first > last )
        printf("Not found! %d is not present in the list.\n", search);
    return 0;
}

////////////////////////////////////program name:linear search//////////////////////////////



#include <stdio.h>
int main()
{
  int array[100], search, c, n;

  printf("Enter number of elements in array\n");
  scanf("%d", &n);

  printf("Enter %d integer(s)\n", n);

  for (c = 0; c < n; c++)
    scanf("%d", &array[c]);

  printf("Enter a number to search\n");
  scanf("%d", &search);

  for (c = 0; c < n; c++)
  {
    if (array[c] == search)    /* If required element is found */
    {
      printf("%d is present at location %d.\n", search, c+1);
      break;
    }
  }
  if (c == n)
    printf("%d isn't present in the array.\n", search);

  return 0;
}

////////////////////////////////program name:stack using array/////////////////////
 

#include<stdio.h>
int stack[100],choice,n,top,x,i;
void push(void);
void pop(void);
void display(void);
int main()
{
    //clrscr();
    top=-1;
    printf("\n Enter the size of STACK[MAX=100]:");
    scanf("%d",&n);
    printf("\n\t STACK OPERATIONS USING ARRAY");
    printf("\n\t--------------------------------");
    printf("\n\t 1.PUSH\n\t 2.POP\n\t 3.DISPLAY\n\t 4.EXIT");
    do
    {
        printf("\n Enter the Choice:");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
            {
                push();
                break;
            }
            case 2:
            {
                pop();
                break;
            }
            case 3:
            {
                display();
                break;
            }
            case 4:
            {
                printf("\n\t EXIT POINT ");
                break;
            }
            default:
            {
                printf ("\n\t Please Enter a Valid Choice(1/2/3/4)");
            }
                
        }
    }
    while(choice!=4);
    return 0;
}
void push()
{
    if(top>=n-1)
    {
        printf("\n\tSTACK is over flow");
        
    }
    else
    {
        printf(" Enter a value to be pushed:");
        scanf("%d",&x);
        top++;
        stack[top]=x;
    }
}
void pop()
{
    if(top<=-1)
    {
        printf("\n\t Stack is under flow");
    }
    else
    {
        printf("\n\t The popped elements is %d",stack[top]);
        top--;
    }
}
void display()
{
    if(top>=0)
    {
        printf("\n The elements in STACK \n");
        for(i=top; i>=0; i--)
            printf("\n%d",stack[i]);
        printf("\n Press Next Choice");
    }
    else
    {
        printf("\n The STACK is empty");
    }
   
}



/////////////////////////////////queue using array///////////////////////



#include<stdio.h>
#define n 5
int main()
{
    int queue[n],ch=1,front=0,rear=0,i,j=1,x=n;
    printf("Queue using Array");
    printf("\n1.Insertion \n2.Deletion \n3.Display \n4.Exit");
    while(ch)
    {
        printf("\nEnter the Choice:");
        scanf("%d",&ch);
        switch(ch)
        {
        case 1:
            if(rear==x)
                printf("\n Queue is Full");
            else
            {
                printf("\n Enter no %d:",j++);
                scanf("%d",&queue[rear++]);
            }
            break;
        case 2:
            if(front==rear)
            {
                printf("\n Queue is empty");
            }
            else
            {
                printf("\n Deleted Element is %d",queue[front++]);
                x++;
            }
            break;
        case 3:
            printf("\nQueue Elements are:\n ");
            if(front==rear)
                printf("\n Queue is Empty");
            else
            {
                for(i=front; i<rear; i++)
                {
                    printf("%d",queue[i]);
                    printf("\n");
                }
                break;
            case 4:
                exit(0);
            default:
                printf("Wrong Choice: please see the options");
            }
        }
    }
    return 0;
}

//////////////////////////////bubble sort////////////////////////


#include<stdio.h>
int main()
{
    int a[10],i,j,temp,n;
    printf("\n Enter the max no.of Elements to Sort: \n");
    scanf("%d",&n);
    printf("\n Enter the Elements : \n");
    for(i=0; i<n; i++)
    {
        scanf("%d",&a[i]);
    }
    for(i=0; i<n; i++)
        for(j=i+1; j<n; j++)
        {
            if(a[i]>a[j])
            {
                temp=a[i];
                a[i]=a[j];
                a[j]=temp;
            }
        }
    for(i=0; i<n; i++)
    {
        printf("%d\t",a[i]);
    }
    return 0;
}

///////////////////////////////////////////////////////////////

//////factorial///////
#include <stdio.h>

int main()
{
    int a, b = 1;
    printf("Enter the Value : ");
    scanf("%d",&a);
    
    for (int i = 1; i <= a; i++)
    {
        b = b * i;
    }
    printf("The factorial of %d is %d ",a,b);
}

///////fibonacci series///////
#include <stdio.h>
int main()
{
    int a = -1, b = 1, c, n;
    printf("Enter the Value : ");
    scanf("%d",&n);
  
    for (int i = 0; i < n; i++)
    {
        c = a + b;
        a = b;
        b = c;
        printf("%d\n",c);
    }
    
}

******************************Sorting*******************8
#include <stdio.h>

int main()
{
    int a, b, r;
    printf("Enter the Range of Array : ");
    scanf("%d",&r);
    int n[r];
    printf("Enter the value : ");
    for (int i = 0; i < r; i++)
    {
        scanf("%d",&n[i]);
    }
    for (int i = 0; i < r; i++)
    {
        for (int j = i+1; j < r; j++)
        {
            if(n[i] > n[j])
            {
                a = n[i];
                b = n[j];
                n[i] = b;
                n[j] = a;
            }
        }
    }
    printf("Array After Sorted : ");
    for (int i = 0; i < r; i++)
    {
        printf("%d",n[i]);
    }
    
}

******************************c pattern program**************888

#include <stdio.h>

int main()
{
   int i, j, n;
   scanf("%d",&n);
   for (i = 1; i <= n; i++)
   {
       printf("\n");
       for(j = 1; j <= i; j++)
       {
           printf("*");
       }
   }
}

***********************************Driving eligible program*****************
#include <stdio.h>

int main()
{
  int a;
  printf("Enter the age : ");
  scanf("%d",&a);
  
  if( a > 18)
  {
      printf("You Are eligible for Driving");
  }
  else
  {
      printf("You Are not eligible for Driving");
  }
********************************Greatest of Three Numbers***********
#include <stdio.h>

int main()
{
    int a, b, c;
    printf("Enter the value of a : ");
    scanf("%d",&a);
    printf("Enter the value of b : ");
    scanf("%d",&b);
    printf("Enter the value of c : ");
    scanf("%d",&c);
    
    if (a > b && a > c)
    {
        printf("A is Greater");
    }
    else if (b > a && b > c)
    {
        printf("B is Greater");
    }
    else if (c > a && c > b)
    {
        printf("C is Greater");
    }
}

